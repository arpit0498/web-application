<!DOCTYPE html>
<?php
$string = file_get_contents("peer.json");
$json = json_decode($string);
if ( $json === null ) {
    echo("<pre>\n");
    echo("Invalid JSON:\n\n");
    echo($string);
    echo("</pre>\n");
    die("<p>Internal error contact instructor</p>\n");
}
?>
<html>
<head>
<title>Assignment: <?= $json->title ?></title>
<style>
li {padding-top: 0.5em;}
pre {padding-left: 2em;}
</style>
</head>
<body style="margin-left:5%; margin-bottom: 60px; margin-right: 5%; font-family: sans-serif;">
<h1>Assignment: <?= $json->title ?></h1>
<p>
In this assignment we will merge our <b>add.php</b> and <b>edit.php</b>
into a single <b>form.php</b> which is capable of adding a new entry or
editing an existing entry. All of the form rendering will be done with 
the the <b>Handlebars</b> JavaScript library.
</p>
<p>
In the sample code, some off the files have been comverted to completely use
in-browser rendering for dynamic data, other files use a in-server MVC approach
similar to previous assignments, and others are hybrid:
<ul>
<li><b>index.php</b> and <b>view.php</b> use in-browser rendering for all data
that comes from the model.  In these files, there is no need to require <b>pdo.php</b>
as a result.</li>
<li><b>form.php</b> uses in-browser rendering to pull in old data if there is a 
field being edited but uses old-style MVC to handle the incoming POST data when
an entry is added or edited.</li>
<li><b>login.php</b> and <b>delete.php</b> are old-style MVC where model, controller,
and view all are handled in PHP.</li>
</ul>
<p>
You can play with a sample implementation of the code at:
<pre>
<a href="http://www.wa4e.com/solutions/res-handlebars/" target="_blank">http://www.wa4e.com/solutions/res-handlebars/</a>
</pre>
</p>
<p>
You can download nearly complete implementation of this 
assignment at:
<pre>
<a href="res-handlebars.zip">http://www.wa4e.com/assn/res-handlebars/res-handlbars.zip</a>
</pre>
The only part that is missing its implementation of <b>profile.php</b>.  
Without a working <b>profile.php</b> the application's 
add functionality will work but the editing and view functionality
will not work.
</p>
<p>
To complete the application you must add the <b>profile.php</b>.
The <b>profile.php</b> will take a profile_id as a parameter,
query the database tables, and return JSON that looks as follows:
<pre>

http://.../res-handlebars/profile.php?profile_id=11

{
    "profile":
    {
        "profile_id":"11",
        "user_id":"1",
        "first_name":"Charles",
        "last_name":"Severance",
        "email":"chuck@dr-chuck.com",
        "headline":"Having a nice day",
        "summary":"A short summary"
    },
    "positions":[
        {
            "position_id":"45",
            "profile_id":"11",
            "rank":"1",
            "year":"2525",
            "description":"Still being alive"
        }
    ],
    "schools":[
        {
            "year":"1209",
            "name":"University of Cambridge"
        }
    ]
}
</pre>

<h1>What To Hand In</h1>
<p>
As a reminder, your code must meet all the specifications
(including the general specifications) above.  Just having good screen shots
is not enough - we will look at your code to see if you made coding errors.
For this assignment you will hand in:
<ol>
<?php
foreach($json->parts as $part ) {
    echo("<li>$part->title</li>\n");
}
?>
</ol>
<h2 clear="all">General Specifications</h2>
<p>
<b>Note:</b> These are unchanged from the previous assignments.
Here are some general specifications for this assignment:
<ul>
<li>
You <b>must</b> use the PHP PDO database layer for this assignment.  If you use the 
"mysql_" library routines or "mysqli" routines to access the database, you will
<b>receive a zero on this assignment</b>.
<li>
Your name must be in the title tag of the HTML for all of the pages
for this assignment.
</li>
<li>
All data that comes from the users must be properly escaped
using the <b>htmlentities()</b> function in PHP.  You do not 
need to escape text that is generated by your program.
</li>
<li>
You must follow the POST-Redirect-GET pattern for all POST requests.
This means when your program receives and processes a POST request, 
it must not generate any HTML as the HTTP response to that request.
It must use the "header('Location: ...');" function and either "return"
or "exit();" to send the location header and redirect the browser
to the same or a different page.
</li>
<li>
All error messages must be "flash-style" messages where the message is 
passed from a POST to a GET using the SESSION.
</li>
<li>
Please do not use HTML5 in-browser data 
validation (i.e. type="number") for the fields 
in this assignment as we want to make sure you can properly do server 
side data validation.  And in general, even when you do client-side
data validation, you should still validate data on the server in case
the user is using a non-HTML5 browser.
</li>
</ul>
<p>
Provided by: <a href="http://www.wa4e.com/" target="_blank">
www.wa4e.com</a> <br/>
</p>
<center>
Copyright Creative Commons Attribution 3.0 - Charles R. Severance
</center>
</body>
</html>
